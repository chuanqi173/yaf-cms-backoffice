<?phpuse Illuminate\Database\Capsule\Manager as DB;class GoodsController extends BCoreController{	public function goodsAction(){		$this->_view->assign('uniqid',	 uniqid());				$this->_view->assign('goods_cat',DB::table('goods_cat')->where('up','=',0)->orderBy('sortorder','desc')->get());				$this->_view->assign('label',DB::table('label')->orderBy('sortorder','desc')->get());		    }    public function trashedAction(){        $this->_view->assign('uniqid',	 uniqid());        $this->_view->assign('goods_cat',DB::table('goods_cat')->where('up','=',0)->orderBy('sortorder','desc')->get());        $this->_view->assign('label',DB::table('label')->orderBy('sortorder','desc')->get());    }	public function goodsGetAction() {		$itemno		=$this->get('itemno','');		$cat_id		=intval($this->get('cat_id', 0));        $label_id   =$this->get('label_id', 0);		$keywords	=$this->get('keywords', '');		$trashed	=intval($this->get('trashed', 0));		$sort		=$this->get('sort', 'created_at');		$order		=$this->get('order','DESC');		$page		=$this->get('page',1);		$pagesize	=$this->get('rows', 10);		$offset		=($page-1)*$pagesize;		$query		= new goodsModel;        $status		=intval($this->get('status',0));		if($status>0){		    switch ($status){                case 1:                    $query	=	$query	->where('istop','=',1);                    break;                case 2:                    $query	=	$query	->where('ishot','=',1);                    break;                case 3:                    $query	=	$query	->where('status','=',1);                    break;                case 4:                    $query	=	$query	->where('status','=',0);                    break;                case 5:                    $query	=	$query	->where('isnew','=',1);                    break;            }		}		if($itemno!==''){			$query	=	$query	->where('itemno','like',"%{$itemno}%");		}		if($cat_id>0){			$query	=	$query	->whereRaw('FIND_IN_SET(?,cat_id)', [$cat_id]);		}		if($label_id>0){            $query	=	$query	->whereRaw('FIND_IN_SET(?,label_ids)', [$label_id]);        }		if($keywords!==''){			$query	=	$query	->where('id','=', $keywords)                                ->orWhere('name','like',"%{$keywords}%")								->orWhere('keywords', 'like', "%{$keywords}%")								->orWhere('introduce','like', "%{$keywords}%");		}		$stock	=$this->get('stock','');		if($stock!==''){			$query	=	$query->where('stock','<=',intval($stock));		}		if($trashed===1){			$query	=	$query	->where('deleted_at','<>','0000-00-00 00:00:00');		}else{			$query	=	$query	->where('deleted_at','=','0000-00-00 00:00:00');		}		$start_on	=$this->get('start_on', '');		if(!empty($start_on)){			$query	=	$query	->where('updated_at','>=',$start_on);		}        $end_on	    =$this->get('end_on', '');        if(!empty($end_on)){            $query	=	$query	->where('updated_at','<=',$end_on);        }		$total		= $query->count();		$rows 		= $query->orderBy($sort,$order)->orderBy('id','desc')->offset($offset)->limit($pagesize)->get()->toArray();		json(['total'=>$total, 'rows'=>$rows]);		    }	public function goodsaddAction(){        $this->_view->assign('uniqid',	 uniqid());        $this->_view->assign('goods_cat',DB::table('goods_cat')->where('up','=',0)->orderBy('sortorder','desc')->get());        $this->_view->assign('label',DB::table('label')->orderBy('sortorder','desc')->get());    }    public function goodsattraddAction(){        $cat_id		= $this->get('cat_id', 0);        $dataset  	= (new goodscatModel)->find($cat_id)['attr'];        $this->_view->assign('dataset', $dataset);    }	public function getCityAction() {		$province_id= $this->get('province_id', 1);		$city		= DB::table('city')->where('up','=',$province_id)->orderBy('id', 'asc')->get();								json($city);		    }	public function getZoneAction() {		$city_id	= $this->get('city_id', 2);		$zone		= DB::table('city')->where('up','=',$city_id)->orderBy('id', 'asc')->get();								json($zone);		    }	public function goodsincreaseAction(){        $cat_id		=$this->get('cat_id', 0);        $label_ids  =$this->get('label_ids', []);        $name		=$this->get('name',   '');        $englishname=$this->get('englishname',   '');        $keywords	=$this->get('keywords', '');        $title		=$this->get('title', '');        $description=$this->get('description', '');        $images		=$this->get('images', []);        $introduce	=$this->get('introduce','');        $price		=$this->get('price',0.00);        $currentprice=$this->get('currentprice',0.00);        $stock		=$this->get('stock',100);        $unit       =$this->get('unit', '支');        $status		=$this->get('status',0);        $isnew		=$this->get('isnew',0);        $ishot		=$this->get('ishot',0);        $istop		=$this->get('istop',0);        $minquantity=$this->get('minquantity',1);        $maxpurchase=$this->get('maxpurchase',0);        $maxordersquantity=$this->get('maxordersquantity',0);        $itemno		=$this->get('itemno','');        $rankType	=$this->get('rankType',  0);        $rankValue	=$this->get('rankValue',0.00);        $rank       =($rankType==0)?$rankValue:0.00;        $rank_money =($rankType==1)?$rankValue:0.00;        $producthtml=$this->get('producthtml','');        $sortorder	=$this->get('sortorder',500);        $inputs		= array(            ['name'=>'cat_id','value'=>$cat_id,'role'=>'required|existed:goods_cat.id','msg'=>'产品目录ID有误'],        );        $result		= Validate::check($inputs);        if(	!empty($result) ){ret(300, $result);}        $label_ids = implode(',', $label_ids);        $rows	= array(            'cat_id'	=>	$cat_id,            'label_ids' =>  $label_ids,            'name'		=>	$name,            'englishname'=>	$englishname,            'keywords'	=>$keywords,            'title'		=>$title,            'description'=>$description,            'images'	=>implode(',',$images),            'introduce'	=>$introduce,            'price'		=>$price,            'currentprice'=>$currentprice,            'stock'		=>$stock,            'unit'      =>$unit,            'status'	=>$status,            'isnew'		=>$isnew,            'ishot'		=>$ishot,            'istop'		=>$istop,            'minquantity'=>$minquantity,            'maxpurchase'=>$maxpurchase,            'maxordersquantity'=>$maxordersquantity,            'itemno'	=>$itemno,            'rank'		=>$rank,            'rank_money'=>$rank_money,            'producthtml'=>$producthtml,            'sortorder'	=>$sortorder,            'created_at'=>date('Y-m-d H:i:s'),        );        $files	= $this->getFiles('upfile', '');        if( $files!='' && $files['size']>0 ){            if( $image = $this->_uploadPictureToCDN('upfile') ){                $rows['logo']	=	$image;            }else{                $result	= array(                    'ret'		=>	'300',                    'msg'		=>	'图片上传失败.',                );                json($result);            }        }elseif( !empty($images) ){            $rows['logo']	=	$images[0];        }        if( $goods_id=DB::table('goods')->insertGetId($rows) ){            $attr		=$this->get('attr', '');            if(!empty($attr)){                $attr   =json_decode($attr, TRUE);                if(is_array($attr)&&!empty($attr)){                    foreach($attr as $k=>$v){                        if(empty($v['attr_value'])) continue;                        $rows =array(                            'goods_id'	=>$goods_id,                            'attr_id'	=>$v['id'],                            'attr_value'=>$v['attr_value'],                            'attr_price'=>0.00,                        );                        DB::table('goods_attr')->where('goods_id','=',$id)->where('attr_id','=',$v['id'])->insert($rows);                    }}            }            ret(200, '操作成功');        }        ret(300, '数据插入失败');    }		public function goodseditAction(){		$id			= $this->get('id', 0);		$dataset  	= (new goodsModel)->find(intval($id));				$this->_view->assign('dataset', $dataset);        $this->_view->assign('uniqid',	 uniqid());        $this->_view->assign('goods_cat',DB::table('goods_cat')->where('up','=',0)->orderBy('sortorder','desc')->get());    }	public function goodsattreditAction(){		$id			= $this->get('id', 0);		$this->_view->assign('id', $id);				$dataset  	= (new goodsModel)->find(intval($id))['attr'];		$this->_view->assign('dataset', $dataset);    }	public function goodsattrupdateAction(){		$id			= $this->get('id',    0);		$attr		= $this->get('attr', '');				if(!empty($attr)&&is_array($attr)){				$attr_id_arr = [];				foreach($attr as $k=>$v){                    if(empty($v['attr_value'])) continue;                    $rows =array(                        'goods_id'	=>$id,                        'attr_id'	=>$v['id'],                        'attr_value'=>$v['attr_value'],                        'attr_price'=>0.00,                    );					$attr_id_arr[] =$v['id'];					if(DB::table('goods_attr')->where('goods_id','=',$id)->where('attr_id','=',$v['id'])->count()>0){						DB::table('goods_attr')->where('goods_id','=',$id)->where('attr_id','=',$v['id'])->update($rows);					}else{						DB::table('goods_attr')->where('goods_id','=',$id)->where('attr_id','=',$v['id'])->insert($rows);					}				}				#DB::table('goods_attr')->where('goods_id','=',$id)->whereNotIn('attr_id',$attr_id_arr)->delete();		}				$result	= array(                    'code'=>	'200',                    'msg'	=>	'操作成功',        );		json($result);    }    public function goodsRecycleAction(){        do{            if($this->method!='POST'){                $result	= array(                    'code'=>	'300',                    'msg'	=>	'操作失败',                );                break;            }            $id	= $this->get('id', '');            if( empty($id) ){                $result	= array(                    'code'	=>	'300',                    'msg'		=>	'参数为空',                );                break;            }            $goodsDelat	=	DB::table('goods')->find($id)['deleted_at'];            $goodsDelat =   ($goodsDelat=='0000-00-00 00:00:00')?date('Y-m-d H:i:s'):'0000-00-00 00:00:00';            if(DB::table('goods')->where('id','=',$id)->update(['deleted_at'=> $goodsDelat])){                $result		= array(                    'code'		=>	'200',                    'msg'		=>	'操作成功',                );            }else{                $result		= array(                    'code'	=>	'300',                    'msg'		=>	'更新失败',                );            }        }while(FALSE);        die(json_encode($result));    }    public function goodsupdateAction(){		$id		=	$this->get('id', 0);        $cat_id		=$this->get('cat_id', 0);        $label_ids  =$this->get('label_ids', []);		$name		=$this->get('name',   '');		$englishname=$this->get('englishname',   '');		$keywords	=$this->get('keywords', '');		$title		=$this->get('title', '');		$description=$this->get('description', '');		$images		=$this->get('images', []);		$introduce	=$this->get('introduce','');		$price		=$this->get('price',0.00);		$currentprice=$this->get('currentprice',0.00);		$stock		=$this->get('stock',100);        $unit       =$this->get('unit', '支');        $status		=$this->get('status',0);		$isnew		=$this->get('isnew',0);		$ishot		=$this->get('ishot',0);        $istop		=$this->get('istop',0);		$minquantity=$this->get('minquantity',1);        $maxpurchase=$this->get('maxpurchase',0);        $maxordersquantity=$this->get('maxordersquantity',0);		$itemno		=$this->get('itemno','');		$rankType	=$this->get('rankType',  0);        $rankValue	=$this->get('rankValue',0.00);        $rank       =($rankType==0)?$rankValue:0.00;        $rank_money =($rankType==1)?$rankValue:0.00;		$producthtml=$this->get('producthtml','');		$sortorder	=$this->get('sortorder',500);		$inputs		= array(				['name'=>'id','value'=>$id,'role'=>'required|exists:goods.id','msg'=>'产品ID有误'],                ['name'=>'cat_id','value'=>$cat_id,'role'=>'required|existed:goods_cat.id','msg'=>'产品目录ID有误'],		);		$result		= Validate::check($inputs);		if(	!empty($result) ){ret(300, $result);}        $label_ids = implode(',', $label_ids);				$rows	= array(				'cat_id'	=>	$cat_id,                'label_ids' =>  $label_ids,				'name'		=>	$name,								'englishname'=>	$englishname,								'keywords'	=>$keywords,				'title'		=>$title,				'description'=>$description,                'images'	=>implode(',',$images),				'introduce'	=>$introduce,				'price'		=>$price,				'currentprice'=>$currentprice,				'stock'		=>$stock,                'unit'      =>$unit,                'status'	=>$status,				'isnew'		=>$isnew,				'ishot'		=>$ishot,				'istop'		=>$istop,				'minquantity'=>$minquantity,                'maxpurchase'=>$maxpurchase,                'maxordersquantity'=>$maxordersquantity,				'itemno'	=>$itemno,				'rank'		=>$rank,                'rank_money'=>$rank_money,				'producthtml'=>$producthtml,				'sortorder'	=>$sortorder,				'updated_at'=>date('Y-m-d H:i:s'),		);		$dataset= DB::table('goods')->find($id);		$files	= $this->getFiles('upfile', '');								if( $files!='' && $files['size']>0 ){			if( $image = $this->_uploadPictureToCDN('upfile') ){				$rows['logo']	=	$image;			}else{				$result	= array(					'ret'		=>	'300',					'msg'		=>	'图片上传失败.',				);				json($result);			}		}elseif( empty($dataset['logo']) &&  !empty($images) ){			$rows['logo']	=	$images[0];		}				if( DB::table('goods')->where('id','=',$id)->update($rows)!==FALSE ){			$attr		=$this->get('attr', '');			if(!empty($attr)){                $attr   =json_decode($attr, JSON_UNESCAPED_UNICODE);				$attr_id_arr = [];				if(is_array($attr)&&!empty($attr)){				foreach($attr as $k=>$v){                    if(empty($v['attr_value'])) continue;                    $rows =array(                        'goods_id'	=>$id,                        'attr_id'	=>$v['id'],                        'attr_value'=>$v['attr_value'],                        'attr_price'=>0.00,                    );					$attr_id_arr[] =$v['id'];					if(DB::table('goods_attr')->where('goods_id','=',$id)->where('attr_id','=',$v['id'])->count()>0){						DB::table('goods_attr')->where('goods_id','=',$id)->where('attr_id','=',$v['id'])->update($rows);					}else{						DB::table('goods_attr')->where('goods_id','=',$id)->where('attr_id','=',$v['id'])->insert($rows);					}				}}				DB::table('goods_attr')->where('goods_id','=',$id)->whereNotIn('attr_id',$attr_id_arr)->delete();			}			ret(200, '操作成功');		}		ret(300, '数据插入失败');		    }    public function goodsdeleteAction(){			do{			if($this->method!='POST'){				$result	= array(							'code'		=>	'300',							'msg'		=>	'操作失败',																);				break;							}			$id	= $this->get('id', '');			if( empty($id) ){				$result	= array(							'code'		=>	'300',							'msg'		=>	'参数为空',						);				break;			}			if(DB::table('goods')->delete($id)){				$result		= array(							'code'		=>	'200',							'msg'		=>	'操作成功',							);									}else{				$result		= array(							'code'		=>	'300',							'msg'		=>	'删除失败',							);			}		}while(FALSE);					die(json_encode($result));    	    }		public function _uploadPictureToCDN($upfile) {        $files	= $this->getFiles($upfile);		if( $files!=NULL && $files['size']>0 ){			$uploader  = new FileUploader();			$files     = $uploader->getFile($upfile);            if(!$files){				return FALSE;			}            if($files->getSize()==0){				return FALSE;            }			$config	= Yaf_Registry::get('config');            if (!$files->checkExts($config['application']['upfileExts'])){				            	return FALSE;            }			if (!$files->checkSize($config['application']['upfileSize'])){            	return FALSE;            }			$cdnfilename = 'Images-t' . time().rand(100,999) . '.' . $files->getExt();			if( $image = $this->uploadToCDN($files->getTmpName(), $cdnfileName) ){				return $image;			}else{				return FALSE;			}		}				return FALSE;    }		/**     * deal imgage upload     */    private function _uploadPicture($upfile) {        do {            $uploader  = new FileUploader();            $files     = $uploader->getFile($upfile);            if(!$files) break;             if($files->getSize()==0){				//throw new Exception('file size is zero.');				break;            }			$config	= Yaf_Registry::get('config');            if (!$files->checkExts($config['application']['upfileExts'])){				            	//throw new Exception('文件类型出错, 只允许'.$config['application']['upfileExts']);                break;            }			if (!$files->checkSize($config['application']['upfileSize'])){            	//throw new Exception('文件大小出错, 不允许超过.'.$config['application']['upfileSize'].'字节');                break;            }						$filename = 'home-t' . time() . '.' . $files->getExt();			$descdir  = $config['application']['uploadpath'] . '/Home/';			if( !is_dir($descdir) ){ mkdir($descdir); }			$realpath = $descdir . $filename;						if($files->move($realpath)){								return str_replace('./', '/', $realpath);			}        }while(false);                return false;    }	/***PHP上传文件到七牛cdn***/	public function uploadToCDN($filePath, $cdnfileName){								// 需要填写你的 Access Key 和 Secret Key			$accessKey = $this->config['application']['cdn']['accessKey'];			$secretKey = $this->config['application']['cdn']['secretKey'];			// 构建鉴权对象			$auth = new \Qiniu\Auth($accessKey, $secretKey);			// 要上传的空间			$bucket = $this->config['application']['cdn']['bucket'];						// 生成上传 Token			$token = $auth->uploadToken($bucket);			// 上传到七牛后保存的文件名			$key = $cdnfileName;			// 初始化 UploadManager 对象并进行文件的上传			$uploadMgr = new \Qiniu\Storage\UploadManager;			// 调用 UploadManager 的 putFile 方法进行文件的上传			list($ret, $err) = $uploadMgr->putFile($token, $key, $filePath);			if ($err !== null) {				return false;			} else {				return $this->config['application']['cdn']['url'] . $ret['key'];			}	}}