<?phpuse Illuminate\Database\Capsule\Manager as DB;class CouponController extends CommonController{    public function init() {        $this->table = 'coupon';        $this->primaryKey = 'id';        parent::init();    }	#优惠券添加	public function increaseAction() {		$name	=	$this->get('name','');        $value	=	$this->get('value', 0.00);        $min_amount =$this->get('min_amount', 0.00);        $inputs		= array(			['name'=>'name','value'=>$name,'role'=>'required|unique:coupon.name','msg'=>'优惠券名称'],            ['name'=>'value','value'=>$value,'role'=>'required|gt:0.00','msg'=>'优惠券金额'],            ['name'=>'min_amount','value'=>$min_amount,'role'=>'lt:'.$value,'msg'=>'订单最低金额'],		);		$result		= Validate::check($inputs);		if(	!empty($result) ){ret(1, $result);}		parent::increaseAction();    }	#优惠券修改	public function updateAction() {        $name	=	$this->get('name','');        $value	=	$this->get('value', 0.00);        $min_amount =$this->get('min_amount', 0.00);        $inputs		= array(            ['name'=>'name','value'=>$name,'role'=>'required','msg'=>'优惠券名称'],            ['name'=>'value','value'=>$value,'role'=>'required|gt:0.00','msg'=>'优惠券金额'],            ['name'=>'min_amount','value'=>$min_amount,'role'=>'gte:'.$value,'msg'=>'订单最低金额'],        );		$result	= Validate::check($inputs);		if(	!empty($result) ){ret(1, $result);}        parent::updateAction();    }    public function goodsListAction()    {        $id = $this->get('id', 0);        $inputs		= array(            ['name'=>'id','value'=>$id,'role'=>'required|existed:coupon.id','msg'=>'优惠券'],        );        $result		= Validate::check($inputs);        if(	!empty($result) ){ret(1, $result);}        $this->_view->assign('id',	 $id);        $this->_view->assign('uniqid',	 uniqid());        $this->_view->assign('goods_cat',DB::table('goods_cat')->where('up','=',0)->orderBy('sortorder','desc')->get());        $this->_view->assign('label',DB::table('label')->orderBy('sortorder','desc')->get());    }    public function goodsAddAction()    {        $id = $this->get('id', 0);        $inputs		= array(            ['name'=>'id','value'=>$id,'role'=>'required|existed:coupon.id','msg'=>'优惠券'],        );        $result		= Validate::check($inputs);        if(	!empty($result) ){ret(1, $result);}        $id = $this->get('id', 0);        $this->_view->assign('id',	 $id);        $this->_view->assign('uniqid',	 uniqid());        $this->_view->assign('goods_cat',DB::table('goods_cat')->where('up','=',0)->orderBy('sortorder','desc')->get());        $this->_view->assign('label',DB::table('label')->orderBy('sortorder','desc')->get());    }    public function goodsListGetAction() {        $id	        =intval($this->get('id', 0));        $inputs		= array(            ['name'=>'id','value'=>$id,'role'=>'required|existed:coupon.id','msg'=>'优惠券'],        );        $result		= Validate::check($inputs);        if(	!empty($result) ){ret(1, $result);}        $sort		=$this->get('sort', 'created_at');        $order		=$this->get('order','DESC');        $page		=$this->get('page',1);        $pagesize	=$this->get('rows', 10);        $offset		=($page-1)*$pagesize;        $couponGoods=DB::table('coupon')->find($id)['goods_id'];        if(empty($couponGoods)){            json(['total'=>0, 'rows'=>[]]);        }else{            $couponGoods=explode(',', $couponGoods);            $query      =DB::table('goods')->whereIn('id', $couponGoods);            $label_id   =$this->get('label_id', 0);            $status		=intval($this->get('status',0));            $keywords	=$this->get('keywords', '');            if($status>0){                switch ($status){                    case 1:                        $query	=	$query	->where('istop','=',1);                        break;                    case 2:                        $query	=	$query	->where('ishot','=',1);                        break;                    case 3:                        $query	=	$query	->where('status','=',1);                        break;                    case 4:                        $query	=	$query	->where('status','=',0);                        break;                    case 5:                        $query	=	$query	->where('isnew','=',1);                        break;                }            }            if($label_id>0){                $query	=	$query	->whereRaw('FIND_IN_SET(?,label_ids)', [$label_id]);            }            if($keywords!==''){                $query	=	$query	->where('id','=', $keywords)                                    ->orWhere('name','like',"%{$keywords}%")                                    ->orWhere('keywords', 'like', "%{$keywords}%")                                    ->orWhere('itemno','like', "%{$keywords}%");            }            $total		=$query->count();            $rows 		=$query->orderBy($sort,$order)->orderBy('id','desc')->offset($offset)->limit($pagesize)->get();            json(['total'=>$total, 'rows'=>$rows]);        }    }    public function allGoodsListGetAction() {        $id	        =intval($this->get('id', 0));        $inputs		= array(            ['name'=>'id','value'=>$id,'role'=>'required|existed:coupon.id','msg'=>'优惠券'],        );        $result		= Validate::check($inputs);        if(	!empty($result) ){ret(1, $result);}        $label_id   =$this->get('label_id', 0);        $keywords	=$this->get('keywords', '');        $trashed	=intval($this->get('trashed', 0));        $sort		=$this->get('sort', 'created_at');        $order		=$this->get('order','DESC');        $page		=$this->get('page',1);        $pagesize	=$this->get('rows', 10);        $offset		=($page-1)*$pagesize;        $query		=new goodsModel;        $couponGoods=DB::table('coupon')->find($id)['goods_id'];        if(!empty($couponGoods)){            $query = $query->whereNotIn('id', explode(',', $couponGoods));        }        $status		=intval($this->get('status',0));        if($status>0){            switch ($status){                case 1:                    $query	=	$query	->where('istop','=',1);                    break;                case 2:                    $query	=	$query	->where('ishot','=',1);                    break;                case 3:                    $query	=	$query	->where('status','=',1);                    break;                case 4:                    $query	=	$query	->where('status','=',0);                    break;                case 5:                    $query	=	$query	->where('isnew','=',1);                    break;            }        }        if($label_id>0){            $query	=	$query	->whereRaw('FIND_IN_SET(?,label_ids)', [$label_id]);        }        if($keywords!==''){            $query	=	$query  ->where('id','=', $keywords)                                ->orWhere('name','like',"%{$keywords}%")                                ->orWhere('keywords', 'like', "%{$keywords}%")                                ->orWhere('itemno','like', "%{$keywords}%");        }        $stock	=$this->get('stock','');        if($stock!==''){            $query	=	$query->where('stock','<=',intval($stock));        }        if($trashed===1){            $query	=	$query	->where('deleted_at','<>','0000-00-00 00:00:00');        }else{            $query	=	$query	->where('deleted_at','=','0000-00-00 00:00:00');        }        $start_on	=$this->get('start_on', '');        if(!empty($start_on)){            $query	=	$query	->where('updated_at','>=',$start_on);        }        $end_on	    =$this->get('end_on', '');        if(!empty($end_on)){            $query	=	$query	->where('updated_at','<=',$end_on);        }        $total		= $query->count();        $rows 		= $query->orderBy($sort,$order)->orderBy('id','desc')->offset($offset)->limit($pagesize)->get()->toArray();        json(['total'=>$total, 'rows'=>$rows]);    }    public function goodsListIncreaseAction(){        $id = $this->get('id', 0);        $goods_id = $this->get('goods_id', []);        $existGoods = DB::table('coupon')->find($id)['goods_id'];        $existGoods = explode(',', $existGoods);        if(!empty($goods_id)&&is_array($goods_id)){            foreach ($goods_id as $v){                $existGoods[] = $v;            }        }        $existGoods = array_unique($existGoods);        DB::table('coupon')->where('id', '=', $id)->update(['goods_id'=>implode(',', $existGoods)]);        ret(0, '操作成功');    }    public function goodsListDeleteAction(){        $id = $this->get('id', 0);        $goods_id = $this->get('goods_id', []);        $existGoods = DB::table('coupon')->find($id)['goods_id'];        $existGoods = explode(',', $existGoods);        if(!empty($goods_id)&&is_array($goods_id)){            foreach ($existGoods as $k=>$v){                if(in_array($v, $goods_id)){                    unset($existGoods[$k]);                }            }        }        $existGoods = array_unique($existGoods);        DB::table('coupon')->where('id', '=', $id)->update(['goods_id'=>implode(',', $existGoods)]);        ret(0, '操作成功');    }}