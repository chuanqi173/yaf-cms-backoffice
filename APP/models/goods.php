<?phpuse Illuminate\Database\Eloquent\Model;use Illuminate\Database\Capsule\Manager as DB;class goodsModel extends Model{	protected $table 		= 'goods';	protected $primaryKey	= 'id';	protected $appends 		= ['attr', 'cat', 'label', 'comment', 'coupon', 'promotion', 'promotionprice'];		public function Cat()	{		return $this->belongsTo('goodscatModel', 'cat_id', 'id');	}  		public function goods($params){		$rows	=$this->where('status', '=', $params['status']);		if(!empty($params['keywords'])){		    if( DB::table('keywords')->where('keywords','=',$params['keywords'])->count()>0 ){                DB::table('keywords')->where('keywords','=',$params['keywords'])->increment('times');            }else{                DB::table('keywords')->insert(['keywords'=>$params['keywords'], 'times'=>1]);            }			$rows=$rows->where(function($query) use( $params ){								$query->where('title','like', "%{$params['keywords']}%")										->orWhere('keywords','like', "%{$params['keywords']}%")										->orWhere('name','like', "%{$params['keywords']}%");			});		}        if(!empty($params['attr_params'])&&is_array($params['attr_params'])) {            $attrConditions = [];		    foreach ($params['attr_params'] as $k=>$v) {		        if(!empty($v['attr_value'])) {                    $attrCondition = DB::table('goods_attr')->where('attr_id', '=', $v['attr_id'])                                                             ->whereIn('attr_value', $v['attr_value'])                                                              ->lists('goods_id');                    foreach ($attrCondition as $v){                       $attrConditions[] = $v;                    }                }            }            $rows = $rows->whereIn('goods.id', $attrConditions);		}        if($params['label_id']>0) {            $rows=$rows->whereRaw('find_in_set(?, `label_ids`)', [$params['label_id']]);		}		if($params['cat_id']>0){			$rows=$rows->whereRaw('FIND_IN_SET(?,cat_id)', [$params['cat_id']]);		}        if($params['stock']==1){            $rows=$rows->where('stock', '>', 0);        }		$total	=$rows->count();		$list	=$rows->orderBy($params['sort'], $params['order'])					  ->offset($params['offset'])						  ->limit($params['limit'])                      ->select('id','cat_id','label_ids','name','logo','created_at','price','currentprice','title','images','description','stock')					  ->get()					  ->toArray();		return  ['total'=>$total, 'list'=>$list];			  	}		public function getImagesAttribute($value){		return empty($value) ? [] : explode(',', $value);	}    public function getPromotionAttribute(){	    $pro = DB::table('promotion')->where('goods_id','=',$this->attributes['id'])->first();	    if(empty($pro)){	        return FALSE;        }else{            $rows = DB::table('activity')->find($pro['activity_id']);            $rows['timestamp'] = strtotime($rows['end_on']) - time();	        return $rows;        }    }    public function getPromotionpriceAttribute(){        $pro = DB::table('promotion')->join('activity', 'activity.id','=', 'promotion.activity_id')                                     ->where('goods_id','=',$this->attributes['id'])                                     ->where('activity.start_on','<',date('Y-m-d H:i:s'))->where('activity.end_on','>',date('Y-m-d H:i:s'))                                     ->first();        if(empty($pro)){            return 0;        }else{            return $pro['promotionprice'];        }    }		public function getAttrAttribute(){		return (new goodsattrModel)->goodsattr($this->attributes['id'], $this->attributes['cat_id']);	}		public function getCatAttribute(){		return (new goodscatModel)->select('id','title','attributes','up','status')->whereIn('id', explode(',', $this->attributes['cat_id']))->get();	}    public function getLabelAttribute(){	    $rows = DB::table('label')->get();        $label_ids = explode(',', $this->attributes['label_ids']);	    foreach ($rows as &$v){	        $v['flag'] = in_array($v['id'], $label_ids);        }        return $rows;    }		public function getCommentAttribute(){				$rows = DB::table('comment')->join('members','comment.members_id','=','members.id')									->select('comment.*','members.phone','members.avatar','members.name','members.position')									->where('comment.goods_id','=',$this->attributes['id'])                                    ->orderBy('comment.created_at','DESC')->limit(5)->get();		foreach ($rows as &$v){		    $v['photos'] = empty($v['photos']) ? [] : explode(',', $v['photos']);        }        return $rows;	}		public function getCouponAttribute(){				#1. 判断当时是否为促销商品，尚是则不适用优惠券		$promotion =DB::table('promotion')->where('goods_id', '=', $this->attributes['id'])									->where('start_on', '<', date('Y-m-d H:i:s'))									->where('end_on', '>', date('Y-m-d H:i:s'))								  	->first();		if(!empty($promotion)) return '';		#2. 判断有无专用优惠券		$coupon1 =DB::table('coupon')->whereRaw('FIND_IN_SET(?,goods_id)', [$this->attributes['id']])									->where('start_on', '<', date('Y-m-d H:i:s'))									->where('end_on', '>', date('Y-m-d H:i:s'))								  	->get();		if(!empty($coupon1)) return $coupon1;		#3. 判断有无通用优惠券		$coupon2 =DB::table('coupon')->where('goods_id', '=', '')									->where('start_on', '<', date('Y-m-d H:i:s'))									->where('end_on', '>', date('Y-m-d H:i:s'))								  	->get();		if(!empty($coupon2)) return $coupon2;				return '';	}	public function goodsDetail($id){		return $this->find($id);	}    public function cartGoodsDetail($id){        return $this->select('id','cat_id','name','title','description','label_ids','logo','images','price','currentprice','unit','stock','salenum','minquantity','status')                    ->find($id);    }	public function updategoodsSort($rows){		$sql	 	= "INSERT INTO {goods}(id, sortorder) VALUES";		$conditions	= "";		foreach($rows as $key=>$value){								$conditions	.=	"({$key}, {$value}),";		}		$conditions = substr($conditions, 0, -1);		$sql	.=	$conditions;		$sql	.=	" ON   Duplicate  KEY  UPDATE sortorder=VALUES(sortorder)";		return	$this->execute($sql);	}	}